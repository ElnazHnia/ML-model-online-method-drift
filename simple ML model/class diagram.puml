@startuml

class TitanicDataProcessor {
    +load_data(url: str): pd.DataFrame
    +fill_missing_values(df: pd.DataFrame): pd.DataFrame
    +convert_categorical_to_numeric(df: pd.DataFrame): pd.DataFrame
    +normalize_features(X: np.ndarray): np.ndarray
    +to_tensors(X: np.ndarray, y: np.ndarray): Tuple[torch.Tensor, torch.Tensor]
    +split_data(X: torch.Tensor, y: torch.Tensor, train_ratio: float): Tuple[Subset, Subset, Subset, Subset]
}

class TitanicMLP {
    +__init__()
    +forward(x: torch.Tensor): torch.Tensor
    -fc1: nn.Linear
    -fc2: nn.Linear
    -fc3: nn.Linear
}

class Trainer {
    +train_model(model: TitanicMLP, X_train: torch.Tensor, y_train: torch.Tensor, num_epochs: int)
    +test_model(model: TitanicMLP, X_test: torch.Tensor, y_test: torch.Tensor): Tuple[float, float]
    +calculate_metrics(predicted_train: torch.Tensor, y_train_tensor: torch.Tensor, predicted_test: torch.Tensor, y_test_tensor: torch.Tensor): Tuple[float, float]
    -criterion: nn.CrossEntropyLoss
    -optimizer: optim.SGD
}

'class ReportGenerator {
'    +__init__(self, train_data: pd.DataFrame, test_data: pd.DataFrame, column_mapping: ColumnMapping)
'    +generate_report(): None
'    +save_report(file_name: str): None
'}

TitanicDataProcessor "1" --> "1" Trainer : prepares data
Trainer "1" --> "1" TitanicMLP : trains and tests
'Trainer "1" --> "1" ReportGenerator : generates report

@enduml
